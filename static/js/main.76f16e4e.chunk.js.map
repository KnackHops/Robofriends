{"version":3,"sources":["components/Cards.js","components/CardsList.js","components/SearchFunc.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Cards","name","email","id","className","alt","src","CardsList","profile","map","user","key","SearchFunc","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","border","padding","children","App","event","setState","searchfield","target","value","toLowerCase","state","fetch","then","response","json","this","filteredRobots","filter","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAaeA,G,MAXD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC1B,OACA,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,cAAcC,IAAG,+BAA4BH,EAA5B,cAC1B,6BACI,4BAAKF,GACL,2BAAIC,OCcDK,EAnBG,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACI,6BAEQA,EAAQC,KAAI,SAACC,GACT,OACI,kBAAC,EAAD,CACAC,IAAKD,EAAKP,GACVF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,MACZC,GAAIO,EAAKP,UCElBS,EAbI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAClB,OACI,yBAAKT,UAAU,OACX,2BACAA,UAAY,mCACZU,KAAO,SACPC,YAAc,gBACdC,SAAcH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,OAAQC,OAAQ,kBAAmBC,QAAS,SACjFL,EAAMM,WCuCJC,E,YApCX,aAAe,IAAD,8BACV,+CAWJZ,eAAiB,SAACa,GACd,EAAKC,SAAU,CAAEC,YAAaF,EAAMG,OAAOC,MAAMC,iBAXjD,EAAKC,MAAQ,CACTxB,QAAS,GACToB,YAAa,IAJP,E,iFAQO,IAAD,OAChBK,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAxB,GAAI,OAAE,EAAKiB,SAAS,CAACnB,QAASE,S,+BAOjH,IAAD,EAC4B2B,KAAKL,MAA9BxB,EADH,EACGA,QAASoB,EADZ,EACYA,YAEXU,EAAiB9B,EAAQ+B,QAAO,SAAA7B,GAClC,OAAOA,EAAKT,KAAK8B,cAAcS,SAASZ,MAE5C,OAAQpB,EAAQiC,OAGZ,yBAAKrC,UAAU,MACX,wBAAIA,UAAU,SAAd,yBACA,kBAAC,EAAD,CAAYS,eAAkBwB,KAAKxB,iBACnC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAWL,QAAW8B,MANlC,wBAAIlC,UAAU,YAAd,gB,GAxBUsC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.76f16e4e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cards = ({ name, email, id }) => {\r\n    return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt=\"roboprofile\" src = {`https://robohash.org/${id}?200x200`}></img>\r\n        <div>\r\n            <h1>{name}</h1>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport Cards from './Cards';\r\n\r\nconst CardsList = ({ profile }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                profile.map((user) => {\r\n                    return (\r\n                        <Cards \r\n                        key={user.id}\r\n                        name={user.name}\r\n                        email={user.email}\r\n                        id={user.id}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardsList;","import React from 'react';\r\n\r\nconst SearchFunc = ({ onSearchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n            className = 'pa3 ba b--green bg-lightest-blue'\r\n            type = 'search'\r\n            placeholder = 'Search Robots'\r\n            onChange =  { onSearchChange }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchFunc;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: \"scroll\", height: '75vh', border: '1px solid black', padding: '2rem'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CardsList from '../components/CardsList';\r\nimport SearchFunc from '../components/SearchFunc';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            profile: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(user=>this.setState({profile: user}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState( { searchfield: event.target.value.toLowerCase() } );\r\n    }\r\n\r\n    render() {\r\n        const { profile, searchfield } = this.state;\r\n\r\n        const filteredRobots = profile.filter(user => {\r\n            return user.name.toLowerCase().includes(searchfield);\r\n        });\r\n        return !profile.length ? \r\n        <h1 className=\"tc title\">Loading!</h1> :\r\n        (\r\n            <div className=\"tc\">\r\n                <h1 className=\"title\">R O B O F R I E N D S</h1>\r\n                <SearchFunc onSearchChange = {this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardsList profile = {filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}